// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerStreamClient is the client API for ServerStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerStreamClient interface {
	StartToFinish(ctx context.Context, in *Request, opts ...grpc.CallOption) (ServerStream_StartToFinishClient, error)
}

type serverStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewServerStreamClient(cc grpc.ClientConnInterface) ServerStreamClient {
	return &serverStreamClient{cc}
}

func (c *serverStreamClient) StartToFinish(ctx context.Context, in *Request, opts ...grpc.CallOption) (ServerStream_StartToFinishClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServerStream_ServiceDesc.Streams[0], "/grpc_stream.ServerStream/startToFinish", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverStreamStartToFinishClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServerStream_StartToFinishClient interface {
	Recv() (*wrapperspb.Int64Value, error)
	grpc.ClientStream
}

type serverStreamStartToFinishClient struct {
	grpc.ClientStream
}

func (x *serverStreamStartToFinishClient) Recv() (*wrapperspb.Int64Value, error) {
	m := new(wrapperspb.Int64Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerStreamServer is the server API for ServerStream service.
// All implementations must embed UnimplementedServerStreamServer
// for forward compatibility
type ServerStreamServer interface {
	StartToFinish(*Request, ServerStream_StartToFinishServer) error
	mustEmbedUnimplementedServerStreamServer()
}

// UnimplementedServerStreamServer must be embedded to have forward compatible implementations.
type UnimplementedServerStreamServer struct {
}

func (UnimplementedServerStreamServer) StartToFinish(*Request, ServerStream_StartToFinishServer) error {
	return status.Errorf(codes.Unimplemented, "method StartToFinish not implemented")
}
func (UnimplementedServerStreamServer) mustEmbedUnimplementedServerStreamServer() {}

// UnsafeServerStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerStreamServer will
// result in compilation errors.
type UnsafeServerStreamServer interface {
	mustEmbedUnimplementedServerStreamServer()
}

func RegisterServerStreamServer(s grpc.ServiceRegistrar, srv ServerStreamServer) {
	s.RegisterService(&ServerStream_ServiceDesc, srv)
}

func _ServerStream_StartToFinish_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerStreamServer).StartToFinish(m, &serverStreamStartToFinishServer{stream})
}

type ServerStream_StartToFinishServer interface {
	Send(*wrapperspb.Int64Value) error
	grpc.ServerStream
}

type serverStreamStartToFinishServer struct {
	grpc.ServerStream
}

func (x *serverStreamStartToFinishServer) Send(m *wrapperspb.Int64Value) error {
	return x.ServerStream.SendMsg(m)
}

// ServerStream_ServiceDesc is the grpc.ServiceDesc for ServerStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_stream.ServerStream",
	HandlerType: (*ServerStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "startToFinish",
			Handler:       _ServerStream_StartToFinish_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server_stream.proto",
}
