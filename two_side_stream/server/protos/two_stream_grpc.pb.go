// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TwoStreamClient is the client API for TwoStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwoStreamClient interface {
	CountMultiDiv(ctx context.Context, opts ...grpc.CallOption) (TwoStream_CountMultiDivClient, error)
}

type twoStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewTwoStreamClient(cc grpc.ClientConnInterface) TwoStreamClient {
	return &twoStreamClient{cc}
}

func (c *twoStreamClient) CountMultiDiv(ctx context.Context, opts ...grpc.CallOption) (TwoStream_CountMultiDivClient, error) {
	stream, err := c.cc.NewStream(ctx, &TwoStream_ServiceDesc.Streams[0], "/grpc_stream.TwoStream/countMultiDiv", opts...)
	if err != nil {
		return nil, err
	}
	x := &twoStreamCountMultiDivClient{stream}
	return x, nil
}

type TwoStream_CountMultiDivClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type twoStreamCountMultiDivClient struct {
	grpc.ClientStream
}

func (x *twoStreamCountMultiDivClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *twoStreamCountMultiDivClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TwoStreamServer is the server API for TwoStream service.
// All implementations must embed UnimplementedTwoStreamServer
// for forward compatibility
type TwoStreamServer interface {
	CountMultiDiv(TwoStream_CountMultiDivServer) error
	mustEmbedUnimplementedTwoStreamServer()
}

// UnimplementedTwoStreamServer must be embedded to have forward compatible implementations.
type UnimplementedTwoStreamServer struct {
}

func (UnimplementedTwoStreamServer) CountMultiDiv(TwoStream_CountMultiDivServer) error {
	return status.Errorf(codes.Unimplemented, "method CountMultiDiv not implemented")
}
func (UnimplementedTwoStreamServer) mustEmbedUnimplementedTwoStreamServer() {}

// UnsafeTwoStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwoStreamServer will
// result in compilation errors.
type UnsafeTwoStreamServer interface {
	mustEmbedUnimplementedTwoStreamServer()
}

func RegisterTwoStreamServer(s grpc.ServiceRegistrar, srv TwoStreamServer) {
	s.RegisterService(&TwoStream_ServiceDesc, srv)
}

func _TwoStream_CountMultiDiv_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TwoStreamServer).CountMultiDiv(&twoStreamCountMultiDivServer{stream})
}

type TwoStream_CountMultiDivServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type twoStreamCountMultiDivServer struct {
	grpc.ServerStream
}

func (x *twoStreamCountMultiDivServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *twoStreamCountMultiDivServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TwoStream_ServiceDesc is the grpc.ServiceDesc for TwoStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TwoStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_stream.TwoStream",
	HandlerType: (*TwoStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "countMultiDiv",
			Handler:       _TwoStream_CountMultiDiv_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "two_stream.proto",
}
